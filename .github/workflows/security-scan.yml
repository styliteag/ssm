name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  secret-detection:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive scanning
    
    - name: Run TruffleHog OSS
      id: trufflehog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for Organizations, not needed for personal accounts.
    
    - name: Custom Secret Pattern Check
      run: |
        echo "üîç Running custom secret patterns..."
        
        # Check for patterns that might not be caught by other tools
        SECRETS_FOUND=0
        
        # Private keys
        if grep -r "-----BEGIN.*PRIVATE KEY-----" . --exclude-dir=.git --exclude-dir=.github --exclude-dir=.githooks; then
          echo "‚ùå Private keys detected"
          SECRETS_FOUND=1
        fi
        
        # Custom API key patterns
        if grep -rE "(api_key|apikey|secret_key|secretkey).*=.*[\"'][^\"']{20,}[\"']" . --exclude-dir=.git --exclude-dir=.github --exclude-dir=.githooks --exclude=".secrets-whitelist"; then
          echo "‚ùå API keys detected"
          SECRETS_FOUND=1
        fi
        
        # Long passwords
        if grep -rE "password.*=.*[\"'][^\"']{12,}[\"']" . --exclude-dir=.git --exclude-dir=.github --exclude-dir=.githooks --exclude=".secrets-whitelist"; then
          echo "‚ùå Long passwords detected"
          SECRETS_FOUND=1
        fi
        
        # Database URLs with passwords
        if grep -rE "(postgres|mysql|mongodb)://[^:]+:[^@]{8,}@" . --exclude-dir=.git --exclude-dir=.github --exclude-dir=.githooks --exclude=".secrets-whitelist"; then
          echo "‚ùå Database URLs with passwords detected"
          SECRETS_FOUND=1
        fi
        
        if [ $SECRETS_FOUND -eq 1 ]; then
          echo "üö® Custom secret patterns detected! Check the output above."
          exit 1
        else
          echo "‚úÖ No custom secret patterns detected"
        fi
    
    - name: Check whitelist configuration
      run: |
        if [ -f ".secrets-whitelist" ]; then
          echo "‚úÖ Secrets whitelist found"
          echo "üìã Whitelist summary:"
          grep -c "^[^#]" .secrets-whitelist || echo "0 entries"
          echo "üí° VALUE entries: $(grep -c "^VALUE:" .secrets-whitelist || echo "0")"
        else
          echo "‚ö†Ô∏è No secrets whitelist found"
        fi

  dependency-check:
    name: Dependency Vulnerability Scan  
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  git-hooks-check:
    name: Verify Git Hooks Setup
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check git hooks infrastructure
      run: |
        echo "üîç Checking git hooks infrastructure..."
        
        # Check if shared hooks exist
        if [ -d ".githooks" ] && [ -f ".githooks/pre-commit" ]; then
          echo "‚úÖ Shared git hooks found"
        else
          echo "‚ùå Shared git hooks missing"
          exit 1
        fi
        
        # Check if installation script exists
        if [ -f "install-hooks.sh" ] && [ -x "install-hooks.sh" ]; then
          echo "‚úÖ Hook installation script found and executable"
        else
          echo "‚ùå Hook installation script missing or not executable"
          exit 1
        fi
        
        # Check if whitelist exists
        if [ -f ".secrets-whitelist" ]; then
          echo "‚úÖ Secrets whitelist found"
        else
          echo "‚ùå Secrets whitelist missing"
          exit 1
        fi
        
        # Test hook installation (dry run)
        echo "üß™ Testing hook installation..."
        ./install-hooks.sh
        
        echo "‚úÖ All git hooks infrastructure verified"