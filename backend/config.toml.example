# SSH Key Manager Configuration Example
# Copy this file to config.toml and update with your actual values
#
# NOTE: All settings below are optional. Environment variables take precedence:
# - DATABASE_URL (overrides database_url)
# - HTPASSWD (overrides htpasswd_path)
# - SSH_KEY (overrides private_key_file)
# - SESSION_KEY (overrides session_key)
#
# If no config.toml exists, the server will use environment variables and defaults.

# Database configuration
# SQLite database connection string
# For development, use a local SQLite file
# For production, consider using PostgreSQL or MySQL
# Default: sqlite://ssm.db (if DATABASE_URL not set)
# database_url = "sqlite://ssm.db"

# Port for the web server to listen on
port = 8000

# Session configuration
# Generate a new session key for production using: openssl rand -hex 32
# This key is used to encrypt session cookies
# Default: randomly generated (if SESSION_KEY not set)
# session_key = "YOUR_SESSION_KEY_HERE_32_CHARACTERS_LONG"

# Log level: debug, info, warn, error
loglevel = "info"

# Path to htpasswd file for user authentication
# If this file doesn't exist, the server will auto-create it with admin/random password
# Default: config/.htpasswd (if HTPASSWD not set)
# htpasswd_path = ".htpasswd"

# Number of worker threads (NOTE: This is not currently used by the application)
# For development: 4
# For production: 16 or more depending on your server capacity
# workers = 4

[ssh]
# Path to your SSH private key for authenticating with managed hosts
# If this file doesn't exist, the server will show generation instructions
# Default: keys/id_ssm (if SSH_KEY not set)
# private_key_file = "/path/to/your/ssh/private/key"

# Optional: private key passphrase if your key is encrypted
# Uncomment and set if your SSH key requires a passphrase
# private_key_passphrase = "your_passphrase_here"

# SSH connection timeout in seconds
timeout = 30

# NOTE: The sections below are not currently used by the application
# They are kept for documentation purposes