openapi: 3.1.0
info:
  title: SSH Key Manager API
  description: |
    REST API for managing SSH keys across multiple hosts. This API provides comprehensive
    SSH key management capabilities including user management, host configuration, key
    assignment, and authorized_keys file synchronization.
    
    ## Authentication
    The API uses session-based authentication. All endpoints (except authentication endpoints)
    require an active session established through the `/api/auth/login` endpoint.
    
    ## Error Handling
    All endpoints return consistent error responses with the following structure:
    ```json
    {
      "success": false,
      "message": "Error description"
    }
    ```
    
    ## Success Responses
    Successful responses follow this structure:
    ```json
    {
      "success": true,
      "data": { ... },
      "message": "Optional success message"
    }
    ```
  version: 1.0.0
  contact:
    name: SSH Key Manager
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://your-domain.com
    description: Production server

tags:
  - name: api-info
    description: API information and status
  - name: authentication
    description: User authentication and session management
  - name: hosts
    description: Host management and SSH connections
  - name: users
    description: User account management
  - name: keys
    description: SSH key management
  - name: authorizations
    description: User-host authorization management
  - name: diff
    description: SSH key difference analysis and deployment

paths:
  /:
    get:
      tags:
        - api-info
      summary: Get API information
      description: Returns basic information about the SSH Key Manager API
      operationId: getApiInfo
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ApiInfo'

  /api/auth/login:
    post:
      tags:
        - authentication
      summary: User login
      description: Authenticate user with username and password
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              username: admin
              password: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
          headers:
            Set-Cookie:
              description: Session cookie for authentication
              schema:
                type: string
                example: session_id=abc123; HttpOnly; Path=/
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /api/auth/logout:
    post:
      tags:
        - authentication
      summary: User logout
      description: End the current user session
      operationId: logout
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Logged out successfully"

  /api/auth/status:
    get:
      tags:
        - authentication
      summary: Get authentication status
      description: Check if user is logged in and get username
      operationId: getAuthStatus
      responses:
        '200':
          description: Authentication status
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/StatusResponse'

  /api/host:
    get:
      tags:
        - hosts
      summary: List all hosts
      description: Retrieve all configured hosts
      operationId: getAllHosts
      security:
        - sessionAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
      responses:
        '200':
          description: List of hosts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/HostResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - hosts
      summary: Create new host
      description: Add a new host to the system with SSH connection details
      operationId: createHost
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHostRequest'
            example:
              name: web-server-01
              address: 192.168.1.100
              port: 22
              username: ubuntu
              key_fingerprint: "SHA256:abc123def456..."
              jump_via: null
      responses:
        '201':
          description: Host created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/HostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/host/{name}:
    get:
      tags:
        - hosts
      summary: Get host by name
      description: Retrieve a specific host by its name
      operationId: getHost
      security:
        - sessionAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Host name
          schema:
            type: string
          example: web-server-01
      responses:
        '200':
          description: Host details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/HostResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - hosts
      summary: Update host
      description: Update host configuration
      operationId: updateHost
      security:
        - sessionAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Host name
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHostRequest'
      responses:
        '200':
          description: Host updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Host updated successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - hosts
      summary: Delete host
      description: Delete a host and optionally get confirmation data
      operationId: deleteHost
      security:
        - sessionAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Host name
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostDeleteRequest'
      responses:
        '200':
          description: Host deletion status or confirmation data
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        oneOf:
                          - $ref: '#/components/schemas/DeleteHostResponse'
                          - type: object
                            properties:
                              message:
                                type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/host/{name}/logins:
    get:
      tags:
        - hosts
      summary: Get host logins
      description: Retrieve available login accounts on a host
      operationId: getHostLogins
      security:
        - sessionAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Host name
          schema:
            type: string
        - $ref: '#/components/parameters/ForceUpdateParam'
      responses:
        '200':
          description: Available logins
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginsResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/host/{name}/authorizations:
    get:
      tags:
        - hosts
      summary: List host authorizations
      description: Get all user authorizations for a specific host
      operationId: listHostAuthorizations
      security:
        - sessionAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Host name
          schema:
            type: string
      responses:
        '200':
          description: Host authorizations
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/HostAuthorizationsResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/host/{id}/add_hostkey:
    post:
      tags:
        - hosts
      summary: Add or verify host key
      description: Add a host key fingerprint or verify an existing one
      operationId: addHostKey
      security:
        - sessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Host ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddHostkeyRequest'
      responses:
        '200':
          description: Host key confirmation or success message
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        oneOf:
                          - $ref: '#/components/schemas/HostkeyConfirmation'
                          - type: object
                            properties:
                              message:
                                type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/host/user/authorize:
    post:
      tags:
        - hosts
      summary: Authorize user on host
      description: Grant a user access to a specific host and login
      operationId: authorizeUser
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizeUserRequest'
      responses:
        '200':
          description: User authorized successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "User authorized successfully"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/host/gen_authorized_keys:
    post:
      tags:
        - hosts
      summary: Generate authorized_keys file
      description: Generate the authorized_keys file content for a specific host and login
      operationId: genAuthorizedKeys
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenAuthorizedKeysRequest'
      responses:
        '200':
          description: Generated authorized_keys file
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthorizedKeysResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/host/{name}/set_authorized_keys:
    post:
      tags:
        - hosts
      summary: Deploy authorized_keys file
      description: Deploy authorized_keys file content to a host
      operationId: setAuthorizedKeys
      security:
        - sessionAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Host name
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAuthorizedKeysRequest'
      responses:
        '200':
          description: Authorized keys applied successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Authorized keys applied successfully"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/host/authorization/{id}:
    delete:
      tags:
        - hosts
      summary: Delete authorization
      description: Remove a user authorization from a host
      operationId: deleteAuthorization
      security:
        - sessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Authorization ID
          schema:
            type: integer
      responses:
        '200':
          description: Authorization deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Authorization deleted successfully"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/user:
    get:
      tags:
        - users
      summary: List all users
      description: Retrieve all user accounts
      operationId: getAllUsers
      security:
        - sessionAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - users
      summary: Create new user
      description: Create a new user account
      operationId: createUser
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
            example:
              username: john.doe
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                      message:
                        type: string
                        example: "User created successfully"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/user/{name}:
    get:
      tags:
        - users
      summary: Get user by username
      description: Retrieve a specific user by username
      operationId: getUser
      security:
        - sessionAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Username
          schema:
            type: string
          example: john.doe
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - users
      summary: Delete user
      description: Delete a user account
      operationId: deleteUser
      security:
        - sessionAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Username
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "User deleted successfully"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/user/{old_username}:
    put:
      tags:
        - users
      summary: Update user
      description: Update user details
      operationId: updateUser
      security:
        - sessionAuth: []
      parameters:
        - name: old_username
          in: path
          required: true
          description: Current username
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "User updated successfully"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/user/{username}/keys:
    get:
      tags:
        - users
      summary: Get user SSH keys
      description: Retrieve all SSH keys for a specific user
      operationId: getUserKeys
      security:
        - sessionAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: Username
          schema:
            type: string
      responses:
        '200':
          description: User SSH keys
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserKeysResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/user/{username}/authorizations:
    get:
      tags:
        - users
      summary: Get user authorizations
      description: Retrieve all host authorizations for a specific user
      operationId: getUserAuthorizations
      security:
        - sessionAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: Username
          schema:
            type: string
      responses:
        '200':
          description: User authorizations
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserAuthorizationsResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/user/assign_key:
    post:
      tags:
        - users
      summary: Assign SSH key to user
      description: Add an SSH key to a user account
      operationId: assignKeyToUser
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignKeyRequest'
      responses:
        '201':
          description: Key assigned successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Key assigned successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/user/add_key:
    post:
      tags:
        - users
      summary: Parse SSH key
      description: Parse and validate an SSH public key
      operationId: addKeyDialog
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshPublicKey'
      responses:
        '200':
          description: Key parsed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AddKeyResponse'

  /api/key:
    get:
      tags:
        - keys
      summary: List all SSH keys
      description: Retrieve all SSH keys in the system with username associations
      operationId: getAllKeys
      security:
        - sessionAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
      responses:
        '200':
          description: List of SSH keys
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/KeysResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/key/{id}:
    delete:
      tags:
        - keys
      summary: Delete SSH key
      description: Remove an SSH key from the system
      operationId: deleteKey
      security:
        - sessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Key ID
          schema:
            type: integer
      responses:
        '200':
          description: Key deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Key deleted successfully"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/key/{id}/comment:
    put:
      tags:
        - keys
      summary: Update key comment
      description: Update the comment field of an SSH key
      operationId: updateKeyComment
      security:
        - sessionAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Key ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKeyCommentRequest'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Comment updated successfully"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/authorization/change_options:
    post:
      tags:
        - authorizations
      summary: Change authorization options
      description: Modify SSH key options for an authorization (Not implemented)
      operationId: changeOptions
      security:
        - sessionAuth: []
      responses:
        '501':
          description: Not implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /api/authorization/dialog_data:
    post:
      tags:
        - authorizations
      summary: Get authorization dialog data
      description: Retrieve data needed for user authorization dialogs
      operationId: getAuthorizationDialogData
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationDialogRequest'
      responses:
        '200':
          description: Authorization dialog data
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthorizationDialogResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/diff:
    get:
      tags:
        - diff
      summary: List hosts for diff analysis
      description: Get all hosts available for difference analysis
      operationId: getHostsForDiff
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Hosts available for diff
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DiffHostsResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/diff/{host_name}:
    get:
      tags:
        - diff
      summary: Get host difference analysis
      description: Analyze differences between expected and actual authorized_keys files
      operationId: getHostDiff
      security:
        - sessionAuth: []
      parameters:
        - name: host_name
          in: path
          required: true
          description: Host name to analyze
          schema:
            type: string
        - name: show_empty
          in: query
          description: Show results even if no differences found
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/ForceUpdateParam'
      responses:
        '200':
          description: Difference analysis results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/HostDiffResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/diff/{name}/details:
    get:
      tags:
        - diff
      summary: Get host diff details
      description: Get detailed information about a host for difference analysis
      operationId: getDiffDetails
      security:
        - sessionAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Host name
          schema:
            type: string
      responses:
        '200':
          description: Host diff details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DiffHostResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: session_id
      description: Session-based authentication using HTTP cookies

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1

    PerPageParam:
      name: per_page
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 20

    ForceUpdateParam:
      name: force_update
      in: query
      description: Force cache refresh
      schema:
        type: boolean
        default: false

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            success: false
            message: "Resource not found"

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            success: false
            message: "Invalid request parameters"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            success: false
            message: "Internal server error"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            success: false
            message: "Unauthorized"

  schemas:
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
          example: true
        data:
          description: Response data (varies by endpoint)
        message:
          type: string
          description: Optional message
          example: "Operation completed successfully"
      required:
        - success

    ApiError:
      type: object
      properties:
        success:
          type: boolean
          description: Always false for error responses
          example: false
        message:
          type: string
          description: Error message
          example: "An error occurred"
      required:
        - success
        - message

    ApiInfo:
      type: object
      properties:
        name:
          type: string
          example: "SSH Key Manager API"
        version:
          type: string
          example: "1.0.0"
        description:
          type: string
          example: "REST API for managing SSH keys across multiple hosts"
      required:
        - name
        - version
        - description

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: Username for authentication
          example: admin
        password:
          type: string
          description: Password for authentication
          format: password
          example: password123
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        username:
          type: string
          example: admin
        message:
          type: string
          example: "Login successful"
      required:
        - success
        - username
        - message

    StatusResponse:
      type: object
      properties:
        logged_in:
          type: boolean
          description: Whether user is currently logged in
          example: true
        username:
          type: string
          nullable: true
          description: Username if logged in
          example: admin
      required:
        - logged_in

    HostResponse:
      type: object
      properties:
        id:
          type: integer
          description: Unique host identifier
          example: 1
        name:
          type: string
          description: Host name
          example: web-server-01
        address:
          type: string
          description: IP address or hostname
          example: "192.168.1.100"
        port:
          type: integer
          description: SSH port number
          example: 22
        username:
          type: string
          description: SSH username
          example: ubuntu
        key_fingerprint:
          type: string
          nullable: true
          description: SSH host key fingerprint
          example: "SHA256:abc123def456..."
        jump_via:
          type: integer
          nullable: true
          description: Jump host ID if using SSH tunneling
          example: null
        jumphost_name:
          type: string
          nullable: true
          description: Jump host name if applicable
          example: null
      required:
        - id
        - name
        - address
        - port
        - username

    CreateHostRequest:
      type: object
      properties:
        name:
          type: string
          description: Unique host name
          example: web-server-01
        address:
          type: string
          description: IP address or hostname
          example: "192.168.1.100"
        port:
          type: integer
          minimum: 1
          maximum: 65535
          description: SSH port number
          example: 22
        username:
          type: string
          description: SSH username
          example: ubuntu
        key_fingerprint:
          type: string
          nullable: true
          description: SSH host key fingerprint (leave null for auto-detection)
          example: null
        jump_via:
          type: integer
          nullable: true
          description: Jump host ID for SSH tunneling
          example: null
      required:
        - name
        - address
        - port
        - username

    UpdateHostRequest:
      type: object
      properties:
        name:
          type: string
          description: Host name
          example: web-server-01
        address:
          type: string
          description: IP address or hostname
          example: "192.168.1.100"
        username:
          type: string
          description: SSH username
          example: ubuntu
        port:
          type: integer
          minimum: 1
          maximum: 65535
          description: SSH port number
          example: 22
        key_fingerprint:
          type: string
          nullable: true
          description: SSH host key fingerprint
          example: "SHA256:abc123def456..."
        jump_via:
          type: integer
          nullable: true
          description: Jump host ID
          example: null
      required:
        - name
        - address
        - username
        - port

    HostDeleteRequest:
      type: object
      properties:
        confirm:
          type: boolean
          description: Whether to confirm deletion
          default: false
          example: false
      required:
        - confirm

    DeleteHostResponse:
      type: object
      properties:
        authorizations:
          type: array
          items:
            $ref: '#/components/schemas/UserAndOptions'
          description: Affected user authorizations
        affected_hosts:
          type: array
          items:
            type: string
          description: Names of hosts that depend on this one
          example: ["dependent-host-1", "dependent-host-2"]
      required:
        - authorizations
        - affected_hosts

    AddHostkeyRequest:
      type: object
      properties:
        key_fingerprint:
          type: string
          nullable: true
          description: Host key fingerprint (null to auto-detect)
          example: null

    HostkeyConfirmation:
      type: object
      properties:
        host_name:
          type: string
          example: web-server-01
        login:
          type: string
          example: ubuntu
        address:
          type: string
          example: "192.168.1.100"
        port:
          type: integer
          example: 22
        key_fingerprint:
          type: string
          example: "SHA256:abc123def456..."
        jumphost:
          type: integer
          nullable: true
          example: null
        requires_confirmation:
          type: boolean
          example: true
      required:
        - host_name
        - login
        - address
        - port
        - key_fingerprint
        - requires_confirmation

    LoginsResponse:
      type: object
      properties:
        logins:
          type: array
          items:
            type: string
          description: Available login accounts on the host
          example: ["ubuntu", "root", "deploy"]
      required:
        - logins

    AuthorizeUserRequest:
      type: object
      properties:
        host_id:
          type: integer
          description: Host ID
          example: 1
        user_id:
          type: integer
          description: User ID
          example: 1
        login:
          type: string
          description: Login account on the host
          example: ubuntu
        options:
          type: string
          nullable: true
          description: SSH key options
          example: "command=\"/usr/bin/rsync\""
      required:
        - host_id
        - user_id
        - login

    GenAuthorizedKeysRequest:
      type: object
      properties:
        host_name:
          type: string
          description: Host name
          example: web-server-01
        login:
          type: string
          description: Login account
          example: ubuntu
      required:
        - host_name
        - login

    AuthorizedKeysResponse:
      type: object
      properties:
        login:
          type: string
          description: Login account
          example: ubuntu
        authorized_keys:
          type: string
          description: Generated authorized_keys file content
          example: |
            # Managed by SSH Key Manager
            ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQ... user@host
        diff_summary:
          type: string
          description: Summary of differences
          example: "Found 2 differences"
      required:
        - login
        - authorized_keys
        - diff_summary

    SetAuthorizedKeysRequest:
      type: object
      properties:
        login:
          type: string
          description: Login account
          example: ubuntu
        authorized_keys:
          type: string
          description: authorized_keys file content to deploy
          example: |
            # Managed by SSH Key Manager
            ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQ... user@host
      required:
        - login
        - authorized_keys

    HostAuthorizationsResponse:
      type: object
      properties:
        authorizations:
          type: array
          items:
            $ref: '#/components/schemas/UserAndOptions'
          description: User authorizations for this host
      required:
        - authorizations

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: Unique user identifier
          example: 1
        username:
          type: string
          description: Username
          example: john.doe
        enabled:
          type: boolean
          description: Whether user account is enabled
          example: true
      required:
        - id
        - username
        - enabled

    NewUser:
      type: object
      properties:
        username:
          type: string
          description: Unique username
          example: john.doe
      required:
        - username

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: New username
          example: john.doe
        enabled:
          type: boolean
          description: Whether user account is enabled
          example: true
      required:
        - username
        - enabled

    UserKeyResponse:
      type: object
      properties:
        id:
          type: integer
          description: Key ID
          example: 1
        key_type:
          type: string
          description: SSH key algorithm
          example: ssh-rsa
        key_base64:
          type: string
          description: Base64 encoded key data
          example: "AAAAB3NzaC1yc2EAAAADAQABAAABAQ..."
        key_comment:
          type: string
          nullable: true
          description: Key comment
          example: "user@laptop"
        fingerprint:
          type: string
          nullable: true
          description: Key fingerprint
          example: "SHA256:abc123def456..."
      required:
        - id
        - key_type
        - key_base64

    UserKeysResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/UserKeyResponse'
          description: User's SSH keys
      required:
        - keys

    UserAuthorizationsResponse:
      type: object
      properties:
        authorizations:
          type: array
          items:
            $ref: '#/components/schemas/UserAndOptions'
          description: User's host authorizations
      required:
        - authorizations

    AssignKeyRequest:
      type: object
      properties:
        user_id:
          type: integer
          description: User ID to assign key to
          example: 1
        key_type:
          type: string
          description: SSH key algorithm
          example: ssh-rsa
        key_base64:
          type: string
          description: Base64 encoded key data
          example: "AAAAB3NzaC1yc2EAAAADAQABAAABAQ..."
        key_comment:
          type: string
          nullable: true
          description: Optional key comment
          example: "user@laptop"
      required:
        - user_id
        - key_type
        - key_base64

    SshPublicKey:
      type: object
      properties:
        key_type:
          type: string
          description: SSH key algorithm
          example: ssh-rsa
        key_base64:
          type: string
          description: Base64 encoded key data
          example: "AAAAB3NzaC1yc2EAAAADAQABAAABAQ..."
        comment:
          type: string
          nullable: true
          description: Key comment
          example: "user@laptop"
      required:
        - key_type
        - key_base64

    AddKeyResponse:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/SshPublicKey'
        suggested_action:
          type: string
          description: Suggested next action
          example: "Assign this key to a user"
      required:
        - key
        - suggested_action

    KeyResponse:
      type: object
      properties:
        id:
          type: integer
          description: Key ID
          example: 1
        key_type:
          type: string
          description: SSH key algorithm
          example: ssh-rsa
        key_base64:
          type: string
          description: Base64 encoded key data
          example: "AAAAB3NzaC1yc2EAAAADAQABAAABAQ..."
        key_comment:
          type: string
          nullable: true
          description: Key comment
          example: "user@laptop"
        username:
          type: string
          description: Associated username
          example: john.doe
      required:
        - id
        - key_type
        - key_base64
        - username

    KeysResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/KeyResponse'
          description: All SSH keys in the system
      required:
        - keys

    UpdateKeyCommentRequest:
      type: object
      properties:
        comment:
          type: string
          description: New key comment
          example: "updated comment"
      required:
        - comment

    AuthorizationDialogRequest:
      type: object
      properties:
        host_name:
          type: string
          description: Host name
          example: web-server-01
        username:
          type: string
          description: Username
          example: john.doe
        login:
          type: string
          description: Login account on host
          example: ubuntu
        options:
          type: string
          nullable: true
          description: Current SSH key options
          example: null
      required:
        - host_name
        - username
        - login

    AuthorizationDialogResponse:
      type: object
      properties:
        host_name:
          type: string
          example: web-server-01
        host_id:
          type: integer
          example: 1
        username:
          type: string
          example: john.doe
        user_id:
          type: integer
          example: 1
        login:
          type: string
          example: ubuntu
        options:
          type: string
          nullable: true
          example: null
      required:
        - host_name
        - host_id
        - username
        - user_id
        - login

    DiffHostResponse:
      type: object
      properties:
        id:
          type: integer
          description: Host ID
          example: 1
        name:
          type: string
          description: Host name
          example: web-server-01
        address:
          type: string
          description: Host address
          example: "192.168.1.100"
      required:
        - id
        - name
        - address

    DiffHostsResponse:
      type: object
      properties:
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/DiffHostResponse'
          description: Hosts available for diff analysis
      required:
        - hosts

    HostDiffResponse:
      type: object
      properties:
        host:
          $ref: '#/components/schemas/DiffHostResponse'
        diff_summary:
          type: string
          description: Summary of differences found
          example: "Found 3 differences"
        is_empty:
          type: boolean
          description: Whether there are any differences
          example: false
        total_items:
          type: integer
          description: Total number of differences
          example: 3
      required:
        - host
        - diff_summary
        - is_empty
        - total_items

    UserAndOptions:
      type: array
      items:
        oneOf:
          - type: integer
            description: Authorization ID
          - type: string
            description: Username or login or options
          - type: string
            nullable: true
            description: SSH options (nullable)
      description: Tuple of (authorization_id, username, login, options)
      example: [1, "john.doe", "ubuntu", "command=\"/usr/bin/rsync\""]

security:
  - sessionAuth: []